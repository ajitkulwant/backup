
Find all employees whose salary is greater than avg salary of emps
------------------------------------------------------
Find employee with 3rd highest salary;
------------------------------------------------------
Display employees whose salary is more than sal of all salesman
------------------------------------------------------
Display employees whose salary is more than sal of any salesman
------------------------------------------------------
Display departments in which employees are there
------------------------------------------------------
Display departments in which number of emps > 2
------------------------------------------------------
Display departments in which emps are exist
------------------------------------------------------
Display departments in which emps are not exist


-----------------------------
+ dept
	dept_no : int
	dept_name : string


CREATE TABLE dept
(
	dept_no INT PRIMARY KEY,
	dept_name VARCHAR( 50 )
);
CREATE TABLE dept
(
	dept_no INT,
	dept_name VARCHAR( 50 ),
	PRIMARY KEY( dept_no )
);
CREATE TABLE dept
(
	dept_no INT,
	dept_name VARCHAR( 50 ),
	CONSTRAINT PK_DEPT_DEPTNO PRIMARY KEY( dept_no )
);
----------------------------------
CREATE TABLE emp
(
	emp_no INT PRIMARY KEY,
	emp_name VARCHAR(50),
	dept_no INT,
	FORIEGN KEY (dept_no) REFERENCES dept( dept_no );
);
CREATE TABLE emp
(
	emp_no INT PRIMARY KEY,
	emp_name VARCHAR(50),
	dept_no INT,
 	CONSTRAINT FK_EMP_DEPT_DEPTNO FORIEGN KEY (dept_no) REFERENCES dept( dept_no );
);
----------------------------------
CREATE TABLE address
( 
	emp_no INT,
	place VARCHAR(50)
	FOREIGN KEY (emp_no) REFERENCES emp(emp_no);
);
CREATE TABLE address
( 
	emp_no INT,
	place VARCHAR(50)
	CONSTRAINT FK_ADDRESS_EMP_EMPNO FOREIGN KEY (emp_no) REFERENCES emp(emp_no);
);
----------------------------------
CREATE TABLE meeting
(
	meet_no INT PRIMARY KEY,
	topic VARCHAR(50),
	location VARCHAR(50),	
);
CREATE TABLE meeting
(
	meet_no INT,
	topic VARCHAR(50),
	location VARCHAR(50),	
	PRIMARY KEY(meet_no);
);
CREATE TABLE meeting
(
	meet_no INT,
	topic VARCHAR(50),
	location VARCHAR(50),	
	CONSTRAINT PK_MEETING_MEETNO PRIMARY KEY(meet_no);
);
----------------------------------
CREATE TABLE emp_meeting
(
	emp_meet_id INT PRIMAY KEY auto_increment,
	meet_no INT,
	emp_no INT,
	FOREIGN KEY (meet_no) REFERENCES meeting( meet_no ),
	FOREIGN KEY (emp_no) REFERENCES emp( emp_no ),
);
----------------------------------

SubQuery
	- Select Query inside another query is called sub query.
	- Outer Query is called main query.
	- Inner Query is called sub query.
	- Find all employees whose salary is greater than avg salary of 	- emps	

SELECT * FROM emp;
SELECT sal FROM emp;
SELECT AVG(sal) FROM emp;
SELECT * FROM emp where sal > 2001.562500;

SET @avgSal=2001.562500;
SELECT * FROM emp where sal > @avgSal;

SET @avgSal= (SELECT AVG(sal) FROM emp);
SELECT * FROM emp where sal > @avgSal;

SELECT * FROM emp where sal > ( SELECT AVG(sal) FROM emp );

SELECT * FROM emp where sal > AVG(sal); //Not OK
----------------------------------
	- Find employee with 3rd highest salary;
SELECT * FROM emp;

SELECT sal FROM emp ORDER BY sal;

SELECT sal FROM emp ORDER BY sal DESC;

SELECT sal FROM emp ORDER BY sal DESC LIMIT 2,1;

SELECT DISTINCT sal FROM emp ORDER BY sal DESC LIMIT 2,1;

SELECT * FROM emp where sal = 2975.00;

SET @hSal= 2975.00;
SELECT * FROM emp where sal = @hSal;


SET @hSal= ( SELECT DISTINCT sal FROM emp ORDER BY sal DESC LIMIT 2,1);
SELECT * FROM emp where sal = @hSal;


SELECT * FROM emp where sal = ( SELECT DISTINCT sal FROM emp ORDER BY sal DESC LIMIT 2,1 );
------------------------------------------------------------
	- Display employee details(*) whose salary(sal) is more than 		 (gt) salary of all salesman(job).


SELECT * FROM emp;

SELECT * FROM emp ORDER BY job;

SELECT * FROM emp ORDER BY job DESC;

SELECT * FROM emp WHERE job='SALESMAN';

SELECT sal FROM emp WHERE job='SALESMAN';

SELECT MAX(sal) FROM emp WHERE job='SALESMAN';

SET @sal = ( SELECT MAX(sal) FROM emp WHERE job='SALESMAN' );
SELECT * FROM emp WHERE sal > @sal;


SELECT * FROM emp WHERE sal > ( SELECT MAX(sal) FROM emp WHERE job='SALESMAN' );


SELECT * FROM emp WHERE sal > ALL( SELECT sal FROM emp WHERE job='SALESMAN' );


- Display employees whose salary is more than sal of any salesman

SELECT * FROM emp WHERE sal > ( SELECT MIN(sal) FROM emp WHERE job='SALESMAN' );

SELECT * FROM emp WHERE job != 'SALESMAN' AND sal > ( SELECT MIN(sal) FROM emp WHERE job='SALESMAN' );


SELECT * FROM emp WHERE sal > ANY( SELECT sal FROM emp WHERE job='SALESMAN' );


SELECT * FROM emp WHERE job != 'SALESMAN' AND sal > ANY( SELECT sal FROM emp WHERE job='SALESMAN' );


SELECT * FROM emp WHERE job <> 'SALESMAN' AND sal > ANY( SELECT sal FROM emp WHERE job='SALESMAN' );

- Display departments in which employees are there
	SELECT * FROM DEPT;

	SELECT * FROM EMP;

	SELECT deptno FROM emp;

	SELECT * FROM DEPT WHERE deptno = ANY( SELECT deptno FROM emp );

SELECT * FROM DEPT WHERE deptno = ANY( SELECT deptno FROM emp );

SELECT * FROM DEPT d WHERE d.deptno IN( SELECT e.deptno FROM emp e WHERE d.deptno=e.deptno  );


SELECT * FROM DEPT d WHERE EXISTS( SELECT e.deptno FROM emp e WHERE d.deptno=e.deptno  );
------------------------------------------------------------
- Display departments in which number of emps > 2

SELECT * FROM dept;

SELECT * FROM emp;

SELECT deptno, count(deptno) FROM emp GROUP By deptno;

SELECT deptno, count(deptno) FROM emp GROUP By deptno HAVING COUNT(deptno) > 2;


SELECT * FROM Dept d where( SELECT COUNT(e.deptno) FROM emp e  where e.deptno = d.deptno) > 2;


SELECT AVG(sal) FROM emp;

DELETE  FROM emp where sal < ( SELECT AVG(sal) FROM emp );



SELECT * FROM dept;

SELECT * FROM dept WHERE deptno NOT IN( select deptno from emp );

DELETE FROM dept WHERE deptno NOT IN( select deptno from emp );
----------------------------
SQL Transaction
----------------------------

START TRANSACTION;	

DML COMMAND / STATEMENT

COMMIT;

----------------------------
START TRANSACTION;	

DML COMMAND / STATEMENT

ROLLBACK;

----------------------------

START TRANSACTION;	

SAVEPOINT s1;
DML COMMAND1

SAVEPOINT s2;
DML COMMAND2

SAVEPOINT s3;
DML COMMAND3

ROLLBACK TO s1;

COMMIT;










































































